{"componentChunkName":"component---src-templates-blogpost-js","path":"/spring-annotations/","result":{"data":{"markdownRemark":{"html":"<hr>\n<h2>Introduction</h2>\n<p>Annotations were introduced in java so that we don't have to work on xml based configurations. Which one is the better approach? Well, the answer is not clear. <mark><a href=\"https://stackoverflow.com/questions/182393/xml-configuration-versus-annotation-based-configuration?noredirect=1&lq=1\" target=\"_blank\">It depends</a></mark>.</p>\n<p><strong>Configuration</strong></p>\n<p>To register beans we can make individual bean definitions like we did earlier, but they can be registered in a shorter way by using the context namespace. This helps us to configure the annotations with just one line of code.</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\">\n\n    &#x3C;context:annotation-config/> // highlight-line\n&#x3C;/beans>\n</code></pre>\n<h2>Annotations</h2>\n<ol>\n<li><strong>@Required</strong></li>\n</ol>\n<p>The <mark>@Required</mark> annotation make sure that the object on which it is applied to is not null at the time of configuration. Throws an exception when null.</p>\n<p>As of Spring 5.1 <mark>@Required</mark> annotation is deprecated.</p>\n<pre><code class=\"language-java\">private Color color;\n\n@Required\npublic void setColor(Color color) {\n    this.color = color;\n}\n</code></pre>\n<ol start=\"2\">\n<li><strong>@Autowired</strong></li>\n</ol>\n<p>The <mark>@Autowired</mark> annotation can be applied to the constructor of the class.</p>\n<pre><code class=\"language-java\">public class ColorBook {\n    private Color color;\n\n    @Autowired\n    public ColorBook(Color color) {\n        this.color = color;\n    }\n}\n</code></pre>\n<p>If a class has multiple constructors and none of them has the <mark>@Autowired</mark> then primary constructor will be used if present.</p>\n<p>We can also apply the annotation to setter methods, instance variables and constructors.</p>\n<pre><code class=\"language-java\">public class Game {\n    @Autowired // instance variable autowiring\n    private Player player;\n    private Environment env;\n    private Scoreboard scoreboard;\n\n    @Autowired // setting the environment with autowiring in the constructor\n    public Game(Environment env) {\n        this.env = env;\n    }\n\n    @Autowired // setting the scoreboard with autowiring in the setter\n    public void setScoreboard(Scoreboard scoreboard) {\n        this.scoreboard = scoreboard;\n    }\n}\n</code></pre>\n<p>We can also use the annotation to provide beans in an array or collection. The map collection can be autowired but only if the key is of type <mark>String</mark>.</p>\n<p>The default behaviour is making the fields required but if in any case we want to annotate a non required field as autowired then we can apply the required attribute in the <mark>@Autowired</mark> annotation as <mark>false</mark>.</p>\n<pre><code class=\"language-java\">public class Player {\n    private Power power;\n\n    @Autowired(required = false)\n    public Player(Power power) {\n        this.power = power;\n    }\n}\n</code></pre>\n<ol start=\"3\">\n<li><strong>@Primary</strong></li>\n</ol>\n<p>This annotation states that a particular <mark>bean</mark> should be given preference when there are multiple beans to be autowired to a single type of dependency.</p>\n<pre><code class=\"language-java\">@Configuration\npublic class EnvironmentConfig {\n    @Bean\n    @Primary\n    public Environment minimalEnvironment() {\n        // ...\n    }\n\n    @Bean\n    public Environment modedEnvironment() {\n        // ...\n    }\n}\n\npublic class EnvironmentManager {\n    @Autowired\n    private Environment environment;\n}\n</code></pre>\n<p>This will autowire the minimal environment as it is annotated as primary. Similar can be done in xml configuration as well.</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\">\n\n    &#x3C;context:annotation-config/>\n\n    &#x3C;bean class=\"com.ashish.Environment\" primary=\"true\">\n    &#x3C;/bean>\n\n    &#x3C;bean class=\"com.ashish.Environment\">\n    &#x3C;/bean>\n\n    &#x3C;bean id=\"environmentManager\" class=\"com.ashish.EnvironmentManager\"/>\n&#x3C;/beans>\n</code></pre>\n<ol start=\"4\">\n<li><strong>@Qualifier</strong></li>\n</ol>\n<p><mark>@Qualifier</mark> annotation is also use to match the dependency just like <mark>@Primary</mark>, but in @Primary we can only work on dependencies of same type where as in @Qualifier we provide a value using which we can seperate the dependencies.</p>\n<p><code>something</code></p>","frontmatter":{"title":"Spring Annotations","date":"December, 13, 2020","path":"/spring-annotations/","tags":["Java","Annotations","Spring"],"excerpt":null},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"pathSlug":"/spring-annotations/"}},"staticQueryHashes":["3649515864","63159454"]}