{"componentChunkName":"component---src-templates-blogpost-js","path":"/strategy-pattern","result":{"data":{"markdownRemark":{"html":"<hr>\n<h2>Introduction</h2>\n<p><mark>The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</mark></p>\n<p>Easy eh? I know, I know you did'nt get a single word. I mean who would understand anything about a design pattern from just a definition. So let's start with learning with examples.</p>\n<h2>You just got a new project!</h2>\n<p>We will be working on a <code>Cars simulation</code> game. We start with <code>car</code> class in our project.\nEvery car can be used:</p>\n<ul>\n<li>as taxis</li>\n<li>by regular people</li>\n</ul>\n<p>So how do you want to start the project? See, we know that we will be working a lot with cars in this project so let's start with the car class itself. Keeping a minimal car functionality in mind we have:</p>\n<p><strong><em>The Car class</em></strong></p>\n<pre><code class=\"language-java\">public class Car {\n    public void drive() {\n        System.out.println(\"vroom vroom\");\n    }\n\n    public void display() {\n        System.out.println(\"This one looks shinyðŸ˜Ž\");\n    }\n}\n</code></pre>\n<p>As discussed earlier we have 3 types of cars: </p>\n<ol>\n<li>Taxis</li>\n<li>Regular use</li>\n</ol>\n<p>We have already made the <code>car</code> class which can act as a super class and using this super class we can make sub classes. Now let's think about the <code>Taxis</code> a bit.</p>\n<p><strong><em>Taxi</em></strong></p>\n<ol>\n<li>Every taxi is <code>yellow</code> in color.</li>\n</ol>\n<p>For now let's just stick to this only. The rest of the functionality can be taken from the <code>Car</code> class. Keeping everything simple we can now create the <code>Taxi</code> class.</p>\n<pre><code class=\"language-java\">public class Taxi implements Car {\n\n    @Override\n    public void display() {\n        System.out.println(\"Shiny yellowðŸš•\");\n    }\n}\n</code></pre>\n<p>Since the drive functionality is same in both the <code>Car</code> and the <code>Taxi</code> we only have to override the display method of the <code>Car</code> after <code>inheriting</code> from the <code>Car</code> class.</p>\n<p>Let's do the same for the <code>Regular</code> car.</p>\n<p><strong><em>Regular Car</em></strong>\nIn our example regular cars only come in black color. Everything else is good.</p>\n<pre><code class=\"language-java\">public class RegularCar implements Car {\n\n    @Override\n    public void display() {\n        System.out.println(\"Black regular car\");\n    }\n}\n</code></pre>\n<p><strong><em>Everything looks good, time for a break?</em></strong>\nJust as you thought you got a break after working your ass off on the taxis and regular cars, we got another feature to add. We now have to add engine in the car. Wait, that's it? Huh! that will take like 10 seconds. I just have to add engine in the car class.</p>\n<pre><code class=\"language-java\">public class Car {\n    public void drive() {\n        System.out.println(\"vroom vroom\");\n    }\n\n    public void display() {\n        System.out.println(\"This one looks shinyðŸ˜Ž\");\n    }\n\n    public void installEngine() {\n        System.out.println(\"Car engine\");\n    }\n}\n</code></pre>\n<p>Everything works fine here. The <code>Taxi</code> and the <code>Regular</code> car both inherits the engine from the <code>Car</code> class. But wait! There is something wrong here. You are about to get kicked out of the company because you accidently added an engine to a toy car and now all the toy cars are moving at 60 miles/hour and everyone is pissed because of your stupid mistake.</p>\n<p>But what exactly went wrong? We added the engine to the <code>Car</code> class and there can a lot of types of car and not every car needs an engine right? So can we still make it work? let's override the installEngine method in the <code>Toy</code> car class. There we can make it such that it does not require an engine.</p>\n<pre><code class=\"language-java\">public class ToyCar implements Car {\n    \n    @Override\n    public void display() {\n        System.out.println(\"Cute little car\");\n    }\n\n    @Override\n    public void installEngine() {\n        System.out.println(\"No engine required\");\n    }\n}\n</code></pre>\n<p>This actually works fine. The system have started to work back fine after the changes made. Well, you're not going to like this. But there is another issue hereðŸ˜­. We just got a call from the project managers and they want 3 more types of cars. Now, its your job to add those cars and with your current approach you will have to <code>override</code> the engine method in every class. 3 cars are still fine. Imagine you have 100 of cars. Out of these </p>","frontmatter":{"title":"Strategy Pattern","date":"November, 14, 2020","path":"/strategy-pattern","tags":["gatsby","2020"],"excerpt":"Strategy Pattern with Gatsby and React"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{"pathSlug":"/strategy-pattern"}},"staticQueryHashes":["3649515864","63159454"]}