{"componentChunkName":"component---src-templates-blogpost-js","path":"/dependency-injection","result":{"data":{"markdownRemark":{"html":"<hr>\n<h2>Introduction</h2>\n<p><mark>Dependency injection means to provide an object, the instance variables that it is dependent on</mark>. That's it! Let's take a simple example.</p>\n<p><img src=\"https://ashishkumar39.github.io/blogs/dependency-injection.jpeg\" alt=\"Dependency Injection\" title=\"Dependency Injdection diagram\"></p>\n<h2>Using a simple approach</h2>\n<p>Let's say we want to make a drawing app. Using this we can draw triangles on the screen. Let's make the <mark><em>Triangle</em></mark> class for this. Here, we will have 3 instance variables(fields) as our points(coordinates).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Point</span> a<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Point</span> b<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Point</span> c<span class=\"token punctuation\">;</span></span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drawing a triangle on: (\"</span>\n    <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n    <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n    <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>These coordinates are of type Point and it's class looks something like this -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now the question comes, where will we initialize the values for the <code class=\"language-text\">coordinates</code> of the traingle? Should I initialize the Points in the <code class=\"language-text\">Triangle</code> class itself or make another class(something like a main class?) and initialize the points there? Let's start with initializing the Points in the Triangle class first. This is how it will look.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Point</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Point</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Point</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drawing a triangle on: (\"</span>\n                          <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n                          <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n                          <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Easy right? Now I can easily draw triangles with this code ðŸ˜„ But there is something really awful here :P The thing is there is something called <mark>Seperation of Concerns</mark>. It is a design principle which says that <mark>every section of your code should handle seperate concerns and if something is not it's job to handle then it should not care about that</mark>. In our example, we are doing exactly the opposite. It is not the job of Triangle class to initialize the Point objects. It's only job is to take 3 Points and draw a Triangle.</p>\n<p>But wait? why should I care about that? It's works anyways right? Well yes, for now. But as the application grows it becomes really difficult to manage such code. This is called <code class=\"language-text\">Strong coupling</code>. Which is consided a really bad practice. It means we are tying together our Triangle class with our Point class such that our <code class=\"language-text\">Traingle</code> class is responsible for creating the objects for the <code class=\"language-text\">Point</code> class. Which is not it's concern.</p>\n<h2>What else can I do?</h2>\n<p>What about the other option we talked about earlier? Make another class and there initialize all the objects we need in the <code class=\"language-text\">Triangle</code> class. Now I no longer need the initializations in the class itself therefore I will need either a <code class=\"language-text\">constructor</code> or a <code class=\"language-text\">setter</code> to initialize the values for the <code class=\"language-text\">Points</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Point</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Point</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Point</span> c<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        c <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drawing a triangle on: (\"</span>\n                           <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n                           <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n                           <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The constructor here is used to inject the values to the Points. Now we will use this constructor(make an object) in our Main class and provide the required <code class=\"language-text\">dependencies</code> for the class Triangle.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Point</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Point</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Point</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Triangle</span> triangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    triangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Output -</strong></p>\n<p><img src=\"https://ashishkumar39.github.io/blogs/dependency-injection-output1.png\" alt=\"Output\"></p>\n<p>This is also called <mark>Constructor Injection</mark> since we are <mark>injecting the objects through the constructor</mark>. Similarly if we inject the objects using <mark>Setter Injection</mark> in which we use the <mark>setter methods to inject the dependencies</mark>. These are the 2 types of the Dependency Injection.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Point</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Point</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Point</span> c<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        c <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">/*\n    * Setter methods\n    */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setB</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        b <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drawing a triangle on: (\"</span>\n                           <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n                           <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\"), (\"</span> \n                           <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Using the setters to initialize the Points will also produce the exact same result.</p>\n<h2>Conclusion</h2>\n<p>So here we injected the Points to the Triangle object and that's it! This is dependency injection :D There are some <code class=\"language-text\">frameworks</code> which takes this to another level by automatically providing all the dependency on it's own. For example, <mark>Spring Framework uses Inversion of Control which handles the injection of the dependencies</mark> so that you only have to create any objects at all in your application!</p>\n<p>Checkout my Dependency Injection in Spring Framework article!</p>\n<p>Found a mistake? <a href=\"https://github.com/ashishkumar3/blog/blob/master/src/content/blog/dependency-injection/index.md\">edit</a> on github.</p>\n<hr>","frontmatter":{"title":"Dependency Injection","date":"April, 29, 2020","path":"/dependency-injection","tags":["Java","Dependency Injection","Spring"],"excerpt":null},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"pathSlug":"/dependency-injection"}},"staticQueryHashes":["3649515864","3665336997","63159454"]}